@inherits LayoutComponentBase
@inject NavigationManager navigationManager

<MudThemeProvider @bind-IsDarkMode="@isDark" Theme="Theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout class="Body">
    <AuthorizeView>
        <NotAuthorized>
            @if (!IsLoginPage())
            {
                @RedirectToLogin()
            }
        </NotAuthorized>
        <Authorized>
            <NavBar /> 
            <LateralMenu mode="isDark" modeChanged="OnModeChanged" />
        </Authorized>
    </AuthorizeView>
    <main>
        @Body
    </main>
    <MudPopoverProvider />
</MudLayout>

@code{
    private bool isDark = false;

    private MudTheme Theme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                Secondary = Colors.Blue.Accent1,
                Primary = Colors.Teal.Lighten1,
                Tertiary = Colors.DeepOrange.Accent1,
            },
            PaletteDark = new PaletteDark()
            {
                Secondary = Colors.Blue.Accent1,
                Primary = Colors.Teal.Lighten1,
                Tertiary = Colors.DeepOrange.Accent1,
                TextPrimary = Colors.Gray.Lighten5,
                Dark = Colors.Gray.Lighten5,
            }
        };

    private RenderFragment RedirectToLogin() => builder =>
    {
        navigationManager.NavigateTo("Login");
    };

    private void OnModeChanged(bool value)
    {
        // Actualiza el estado del modo oscuro
        isDark = value;
        StateHasChanged(); // Refresca la UI si es necesario
    }

    private bool IsLoginPage()
    {
        var currentUri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var loginUri = navigationManager.ToAbsoluteUri("Login");
        return currentUri.Equals(loginUri);
    }
}
