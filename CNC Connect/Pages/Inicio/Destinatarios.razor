@page "/Destinatarios"
@inject NavigationManager NavigationManager
@inject IRepository repository
@inject IDialogService DialogService


<MudContainer Class="container-body">
    <MudContainer Class="container-items">
        <h1>DESTINATARIOS</h1>

        <InputFile OnChange="HandleFileSelected" />

        <MudFab StartIcon="@Icons.Material.Filled.Save" OnClick="(()=> CreateAsync())" Label="Subir Excel" />
    </MudContainer>
</MudContainer>


@code {

    private Customers customers = new();
    private List<Customers>? ListCustomers = new();

    // public List<Customers> ReadExcel(string filePath)
    // {
    //     var dataList = new List<Customers>();

    //     // Registrar el proveedor de codificación
    //     System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

    //     // Leer el archivo
    //     using (var stream = File.Open(filePath, FileMode.Open, FileAccess.Read))
    //     {
    //         using (var reader = ExcelReaderFactory.CreateReader(stream))
    //         {
    //             while (reader.Read()) // Iterar por cada fila
    //             {
    //                 // Ignorar la primera fila si es un encabezado
    //                 if (reader.Depth == 0) continue;

    //                 dataList.Add(new Customers
    //                     {
    //                         FirstName = reader.GetValue(0)?.ToString(), // Columna 1
    //                         LastNames = reader.GetValue(1)?.ToString(), // Columna 2
    //                         CI = reader.GetValue(0)?.ToString(), // Columna 3
    //                         Email = reader.GetValue(1)?.ToString(), // Columna 4
    //                         Phone = reader.GetValue(0)?.ToString(), // Columna 5
    //                         Sex = reader.GetValue(1)?.ToString(), // Columna 6
    //                         Address = reader.GetValue(0)?.ToString(), // Columna 7
    //                         Birthdate = DateTime.TryParse(reader.GetValue(2)?.ToString(), out var date) ? date : DateTime.MinValue // Columna 8
    //                     });
    //             }
    //         }
    //     }

    //     return dataList;
    // }

    public List<Customers> ReadExcel(string filePath)
    {
        var dataList = new List<Customers>();

        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        using (var stream = File.Open(filePath, FileMode.Open, FileAccess.Read))
        {
            using (var reader = ExcelReaderFactory.CreateReader(stream))
            {
                while (reader.Read())
                {
                    if (reader.Depth == 0) continue; // Ignorar encabezado

                    dataList.Add(new Customers
                        {
                            FirstName = reader.GetValue(0)?.ToString(),
                            LastNames = reader.GetValue(1)?.ToString(),
                            CI = reader.GetValue(2)?.ToString(),
                            Email = reader.GetValue(3)?.ToString(),
                            Phone = reader.GetValue(4)?.ToString(),
                            Sex = reader.GetValue(5)?.ToString(),
                            Address = reader.GetValue(6)?.ToString(),
                            Birthdate = DateTime.TryParse(reader.GetValue(2)?.ToString(), out var date) ? date : DateTime.MinValue // Columna 8
                        });
                }
            }
        }

        return dataList;
    }

    // Manejar archivo seleccionado
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        // Guardar archivo temporalmente
        var tempPath = Path.Combine(Path.GetTempPath(), file.Name);
        using (var stream = new FileStream(tempPath, FileMode.Create))
        {
            await file.OpenReadStream().CopyToAsync(stream);
        }

        // Leer el archivo Excel
        ListCustomers = ReadExcel(tempPath);

        // Elimina el archivo temporal después de procesarlo
        if (File.Exists(tempPath))
        {
            File.Delete(tempPath);
        }
    }

    // Crear registro en la API
    private async Task CreateAsync()
    {
        if (ListCustomers == null || !ListCustomers.Any())
        {
            DialogService.Show<Destinatarios>("Error", new DialogParameters { { "Icon", "error" }, { "Message", "No hay datos para procesar" } });
            return;
        }

        if (ListCustomers.Any())
        {
            foreach (var customer in ListCustomers)
            {
                customers = customer; // Asigna la lista al modelo si tienes una propiedad Lista

                var responseHttp = await repository.Post<Customers>("api/Customers", customers);
                if (responseHttp.Error)
                {
                    var message = await responseHttp.GetErrorMessageAsync();
                    DialogService.Show<Destinatarios>("Error", new DialogParameters { { "Icon", "error" }, { "Message", message } });
                    return;
                }
            }

        }
       

        DialogService.Show<Destinatarios>("Éxito", new DialogParameters { { "Icon", "check_circle" }, { "Message", "Datos cargados correctamente" } });
        NavigationManager.NavigateTo("/"); // Redirige si es necesario
    }

    // private async Task HandleFileSelected(InputFileChangeEventArgs e)
    // {
    //     var file = e.File;
    //     var filePath = Path.Combine("Uploads", file.Name);

    //     // Guardar el archivo temporalmente
    //     using (var stream = new FileStream(filePath, FileMode.Create))
    //     {
    //         await file.OpenReadStream().CopyToAsync(stream);
    //     }

    //     // Leer el archivo Excel
    //     ListCustomers = ReadExcel(filePath);

    //     customers.FirstName = ListCustomers;

    //     // Guardar en la base de datos
    //     //await SaveDataToDatabase(data, _dbContext);
    // }

    // private async Task CreateAsync()
    // {
    //     var responseHttp = await repository.Post("api/Customers", customers);
    //     if (responseHttp.Error)
    //     {
    //         var message = await responseHttp.GetErrorMessageAsync();

    //         DialogService.Show<Destinatarios>("Error", new DialogParameters { { "Icon", "error" }, { "Message", message } });
    //         // await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
    //         return;
    //     }
    
    // }

}
