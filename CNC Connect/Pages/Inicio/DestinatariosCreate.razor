@page "/Destinatarios"
@inject NavigationManager NavigationManager
@inject IRepository repository
@inject IDialogService DialogService


<MudContainer Class="container-body">
    <MudContainer Class="">
        <h3>DESTINATARIOS</h3>

        <InputFile OnChange="seleccionarArchivo" />

        @if(ListCustomers?.Count > 0) {
            <MudFab StartIcon="@Icons.Material.Filled.Save" Size="Size.Small" OnClick="(()=> CreateAsync())" Label="Subir Excel" />
        }
    </MudContainer>
    <MudSpacer></MudSpacer>
    <MudContainer Class="">
        @if (ListCustomers?.Count > 0)
        {

            <div class="table" style="border: none;">
                <MudTable Style="border: none;" HeaderClass="headerTabla" RowClass="rowTabla" Items="ListCustomers" Dense="true" Striped="true" Hover="true" SortLabel="Sort By">
                    <HeaderContent>
                        <MudTh Style="color: white;">NOMBRE</MudTh>
                        <MudTh Style="color: white;">APELLIDO</MudTh>
                        <MudTh Style="color: white;">CEDULA</MudTh>
                        <MudTh Style="color: white;">SEXO</MudTh>
                        <MudTh Style="color: white;">TELEFONO</MudTh>
                        <MudTh Style="color: white;">CORREO</MudTh>
                        <MudTh Style="color: white;">DIRECCION</MudTh>
                        <MudTh Style="color: white;">FECHA DE NACIMIENTO</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="customer">
                        <MudTd>@customer.FirstName</MudTd>
                        <MudTd>@customer.LastNames</MudTd>
                        <MudTd>@customer.CI</MudTd>
                        <MudTd>@customer.Sex</MudTd>
                        <MudTd>@customer.Phone</MudTd>
                        <MudTd>@customer.Email</MudTd>
                        <MudTd>@customer.Address</MudTd>
                        <MudTd>@customer.Birthdate</MudTd>

                    </RowTemplate>
                </MudTable>
            </div>
        }
    </MudContainer>

    <MudContainer Class="">
        @if (mostrar)
        {

            <div class="blur-overlay" @onclick="ocultar"></div>

            <div class="cartaDetalle">
                <div class="contenedorTabla" style="justify-content: end; padding-bottom: 10px;">
                    <MudIconButton Icon="@Icons.Material.Rounded.Close" Color="Color.Error" OnClick="ocultar" Size="Size.Small" />
                </div>

                <TablaDestinatarios Duplicados="customersDuplicados" Invalidos="customersInvalidos" />


            </div>

        }
    </MudContainer>    
</MudContainer>


@code {
    private bool mostrar = false;

    private Customers customers = new();
    private List<Customers>? ListCustomers = new();

    private List<Customers>? customersDuplicados = new();
    private List<Customers>? customersInvalidos = new();

    private void ocultar()
    {
        mostrar = false;
    }

    public List<Customers> leerExcel(string filePath)
    {
        var dataList = new List<Customers>();

        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        using (var stream = File.Open(filePath, FileMode.Open, FileAccess.Read))
        {
            using (var reader = ExcelReaderFactory.CreateReader(stream))
            {
                while (reader.Read())
                {
                    if (reader.Depth == 0) continue; // Ignorar encabezado

                    // Validar que al menos una columna tenga datos
                    if (camposVacios(reader)) continue;

                    dataList.Add(new Customers
                        {
                            FirstName = reader.GetValue(0)?.ToString(), // Columna 1
                            LastNames = reader.GetValue(1)?.ToString(), // Columna 2
                            CI = reader.GetValue(2)?.ToString(),        // Columna 3
                            Email = reader.GetValue(3)?.ToString(),     // Columna 4
                            Phone = reader.GetValue(4)?.ToString(),     // Columna 5
                            Sex = reader.GetValue(5)?.ToString(),       // Columna 6
                            Address = reader.GetValue(6)?.ToString(),   // Columna 7
                            Birthdate = DateTime.TryParse(reader.GetValue(7)?.ToString(), out var date) ? date :  DateTime.MinValue // Columna 8
                            //Birthdate = ParseBirthdate(reader.GetValue(7)?.ToString()) // Columna 8
                        });
                }
            }
        }

        return dataList;
    }

    // Método para verificar si una fila está vacía
    private bool camposVacios(IExcelDataReader reader)
    {
        for (int i = 0; i < reader.FieldCount; i++)
        {
            if (!string.IsNullOrEmpty(reader.GetValue(i)?.ToString()))
            {
                return false; // Si al menos una celda tiene datos, no está vacía
            }
        }
        return true; // Si todas las celdas están vacías, la fila está vacía
    }

    // Manejar archivo seleccionado
    private async Task seleccionarArchivo(InputFileChangeEventArgs e)
    {
        var file = e.File;

        // Guardar archivo temporalmente
        var tempPath = Path.Combine(Path.GetTempPath(), file.Name);
        using (var stream = new FileStream(tempPath, FileMode.Create))
        {
            await file.OpenReadStream().CopyToAsync(stream);
        }

        // Leer el archivo Excel
        ListCustomers = leerExcel(tempPath);

        // Elimina el archivo temporal después de procesarlo
        if (File.Exists(tempPath))
        {
            File.Delete(tempPath);
        }
    }

    // Crear registro en la API
    private async Task CreateAsync()
    {
        if (ListCustomers == null || !ListCustomers.Any())
        {
            DialogService.Show<Destinatarios>("Error", new DialogParameters { { "Icon", "error" }, { "Message", "No hay datos para procesar" } });
            return;
        }

        if (ListCustomers.Any())
        {
            foreach (var customer in ListCustomers)
            {
                customers = customer; // Asigna la lista al modelo si tienes una propiedad Lista

                var responseHttp = await repository.Post<Customers>("api/Customers", customers);
                if (responseHttp.Error)
                {
                    var message = await responseHttp.GetErrorMessageAsync();

                    // Verifica si el error es por registro duplicado
                    if (message.Contains("existe") || message.Contains("Destinatario ya existe.")) // Ajusta este mensaje según la API
                    {
                        customersDuplicados?.Add(customer); // Agrega el registro duplicado a la lista
                    }
                    else
                    {
                        customersInvalidos?.Add(customer); // Agrega los registros con errores de formato
                    }
                    return;
                }
            }

            // Mostrar la tabla con registros problemáticos si existen
            if (customersDuplicados.Any() || customersInvalidos.Any())
            {
                mostrar = true;
            }

            DialogService.Show<MessageBox>("Informacion", new DialogParameters { { "Icon", "info" }, { "Message", "Proceso finalizado con exito." } });

        }
       
    }


}
