@inject IDialogService DialogService
@using CNC_Connect.Shared
@inject WhatsAppService WhatsAppService
@inject IRepository repository

<MudContainer Style="margin-top:10px;">
    <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Style="margin-bottom:15px" OnClick="OnVolver">Volver</MudButton>
    @if (Skeleton)
    {
        <MudSkeleton />
        <MudSkeleton Animation="Animation.False" />
        <MudSkeleton Animation="Animation.Wave" />
    }
    else{
        <div Class="container-whatsapp">
            <div class="variables-container">
                <MudText Typo="Typo.h6">Variables</MudText>

                <div class="variables">
                    <MudSelect @bind-Value="_value" Clearable="true" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (var variables in _variables)
                        {
                            <MudSelectItem Value="variables">@variables</MudSelectItem>
                        }
                    </MudSelect>

                    <div Style="height: auto;">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.AddCircle" IconSize="Size.Small" Size="Size.Small" OnClick="AgregarVariable">Agregar</MudButton>
                    </div>
                </div>
            </div>
            <div class="mensaje-container">
                <MudButton StartIcon="@Icons.Material.Filled.PermContactCalendar" Size="Size.Large" IconSize="Size.Large" Style="width: max-content" OnClick="OpenDialogAsync">Destinatarios</MudButton>

                <MudTextField T="string" Label="Para:" @bind-Value=Clientes ReadOnly="true" Variant="Variant.Outlined" Lines="1" />

                <MudTextField T="string" Label="Mensaje:" Variant="Variant.Outlined" @bind-Value="mensaje" Lines="5" />

                <div class="buton-container">
                    <div style="height:auto">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Send" Size="Size.Small" OnClick="ConfirmDialogMessage">Enviar</MudButton>
                    </div>

                    <div>
                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                            <ActivatorContent>
                                <MudIconButton Color="Color.Primary"
                                               Icon="@Icons.Material.Filled.PhotoCamera">
                                </MudIconButton>
                            </ActivatorContent>
                        </MudFileUpload>
                        <MudIconButton Icon="@Icons.Material.Filled.AddLink" Size="Size.Large" />
                    </div>


                </div>
                @if (_files != null)
                {
                    <MudList T="string">
                        <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@_files">
                            @_files.Name <code>@_files.Size bytes</code>
                        </MudListItem>
                    </MudList>
                }
            </div>
        </div>
    }
    
</MudContainer>

<MudDialog @bind-Visible="visible" Options=" new() { MaxWidth = MaxWidth.Medium, FullWidth = true, BackdropClick = false }">
    <DialogContent>
        <MudText Typo="Typo.h6" Align="Align.Center">Enviando Mensajes</MudText>
        <MudProgressLinear Value="ProgressValue" Color="Color.Primary" Class="mt-4" Rounded="true" Size="Size.Large" Striped="true" />
        <MudText Typo="Typo.subtitle2" Align="Align.Center" Class="mt-2">
            @($"{ProgressValue:F0}% completado")
        </MudText>
        <MudText>@processedCount de @totalProcessedCount</MudText>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public EventCallback OnVolver { get; set; }

    public List<Customers>? Customers { get; set; }

    public List<Customers>? FilteredCustomers { get; set; }

    private List<string> FiltrosAplicados = new List<string>();

    public string? Clientes { get; set; }

    string _value;

    private string mensaje;
    private string[] _variables = [
    "Nombre Completo", "Nombres", "Apellidos", "Fecha de Nacimiento", "Sexo"
    ];

    private double ProgressValue = 0; // Variable para el progreso global
    private int processedCount = 0;
    private int totalProcessedCount = 0;
    private bool Skeleton = true;

    private bool visible = false;

    private byte[]? _imageData;

    IBrowserFile _files;

    private async Task UploadFiles(IBrowserFile file)
    {
        try
        {
            // Convertir el archivo a byte[]
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            _imageData = memoryStream.ToArray();

            _files = file; // Guarda la referencia para mostrar en la UI
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Error", $"Error al cargar el archivo: {ex.Message}");
        }
    }


    protected async override Task OnInitializedAsync()
    {
        var responseHppt = await repository.Get<List<Customers>>("api/Customers");
        Customers = responseHppt.Response!;
        Clientes = string.Join(", ", Customers.Select(c => c.FirstName));
        FilteredCustomers = Customers;
        Skeleton = false;
    }

    private async Task OpenDialogAsync()
    {
        var parameters = new DialogParameters { { "FiltrosAplicados", FiltrosAplicados }, { "FiltroEliminado", EventCallback.Factory.Create<string>(this, OnFiltroEliminado) }, { "FiltroAgregado", EventCallback.Factory.Create<string>(this, OnFiltroAgregado) } };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, Position = DialogPosition.TopCenter };

        var dialogReference = await DialogService.ShowAsync<Destinatarios>("Filtros de los clientes", parameters, options);

        //Filtro de los clientes

        dialogReference?.Result.ContinueWith(result =>
       {
           if (result.Result?.Canceled == false) // Opcional: verifica si el diálogo fue cancelado
           {
               InvokeAsync(onFiltro); // Ejecuta onFiltro en el contexto de Blazor
           }
       });
    }

    private async Task onFiltro()
    {
        if (Customers == null) return;

        // Crear una lista temporal para almacenar los clientes filtrados
        var filteredList = Customers.AsQueryable();

        // Aplicar cada filtro en `FiltrosAplicados`
        foreach (var filtro in FiltrosAplicados)
        {
            var parts = filtro.Split('=');
            if (parts.Length < 2) continue;

            var propiedad = parts[0];
            var valor = parts[1];

            var fechaDesde = DateTime.Now;
            var fechaHasta = DateTime.Now;

            var edadInicio = 0;
            var edadFin = 0;

            if (propiedad == "Fecha_de_Nacimiento")
            {
                var partsFecha = valor.Split('a');
                fechaDesde = DateTime.Parse(partsFecha[0]);
                fechaHasta = DateTime.Parse(partsFecha[1]);
            }

            if(propiedad == "Edad")
            {
                var partsEdad = valor.Split('-');
                edadInicio = int.Parse(partsEdad[0]) - 1;
                edadFin = int.Parse(partsEdad[1]) + 1;

            }

            // Filtrar según el nombre de la propiedad
            filteredList = propiedad switch
            {
                "Sexo" => filteredList.Where(c => c.Sex == valor),
                "Fecha_de_Nacimiento" => filteredList.Where(c => c.Birthdate >= fechaDesde && c.Birthdate <= fechaHasta),
                "Edad" => filteredList.Where(c => c.Birthdate <= DateTime.Now.AddYears(-edadInicio) &&
    c.Birthdate >= DateTime.Now.AddYears(-edadFin)),
                // Agrega más condiciones aquí según las propiedades que deseas filtrar
                _ => filteredList
            };
        }

        // Asignar la lista filtrada a FilteredCustomers para mostrarla en la UI
        FilteredCustomers = filteredList.ToList();

        Clientes = string.Join(", ", FilteredCustomers.Select(c => c.FirstName));
        StateHasChanged();
    }

    private void OnFiltroEliminado(string filtro)
    {
        FiltrosAplicados.Remove(filtro);
        StateHasChanged(); // Refresca la UI
    }

    private void OnFiltroAgregado(string filtro)
    {
        FiltrosAplicados.Add(filtro);
        StateHasChanged(); // Refresca la UI
    }

    private void AgregarVariable()
    {
        mensaje += "{"+ _value + "}";
    }

    private async Task ConfirmDialogMessage()
    {
        var parameters = new DialogParameters { { "Mensaje", mensaje } };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, Position = DialogPosition.TopCenter };

        var dialogReference = await DialogService.ShowAsync<MessageConfirm>("Confirmacion", parameters, options);

        //Filtro de los clientes

        dialogReference?.Result.ContinueWith(result =>
       {
           if (result.Result?.Canceled == false) // Opcional: verifica si el diálogo fue cancelado
           {
               InvokeAsync(SendMessage); // Ejecuta onFiltro en el contexto de Blazor
           }
       });
    }

    private async Task SendMessage()
    {
        try
        {
            ProgressValue = 0;
            processedCount = 0;
            var totalCustomers = FilteredCustomers?.Count ?? 0;
            totalProcessedCount = totalCustomers;

            visible = true;
            foreach (var customer in FilteredCustomers!)
            {
                // Personalizar el mensaje
                var mensajePersonalizado = mensaje
                    .Replace("{Nombre Completo}", $"{customer.FirstName} {customer.LastNames}")
                    .Replace("{Nombres}", customer.FirstName)
                    .Replace("{Apellidos}", customer.LastNames)
                    .Replace("{Fecha de Nacimiento}", customer.Birthdate.ToString("dd/MM/yyyy"))
                    .Replace("{Sexo}", customer.Sex);

                // Dar formato al teléfono
                var telefonoCorrecto = customer.Phone.StartsWith("0")
                    ? "58" + customer.Phone.Substring(1)
                    : customer.Phone.StartsWith("4")
                        ? "58" + customer.Phone
                        : customer.Phone;

                //Enviar el mensaje
                if (telefonoCorrecto.Length >= 10 && !string.IsNullOrEmpty(mensajePersonalizado))
                {
                    if (_imageData != null)
                    {
                        await WhatsAppService.SendMessageWithImageAsync(telefonoCorrecto, mensajePersonalizado, _imageData);
                    }
                    else
                    {
                        await WhatsAppService.SendMessageAsync(telefonoCorrecto, mensajePersonalizado!);
                    }
                }

                // Actualizar progreso
                processedCount++;
                ProgressValue = (double)processedCount / totalCustomers * 100;

                // Forzar actualización en vivo
                await InvokeAsync(StateHasChanged);

                // Simular progreso visualmente (opcional)
                await Task.Delay(200);
            }

            visible = false;

            // Resetear variables
            mensaje = "";
            _value = "";
            FiltrosAplicados = new List<string>();
            FilteredCustomers = Customers;
            Clientes = string.Join(", ", FilteredCustomers!.Select(c => c.FirstName));
            _imageData = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            DialogService.Show<MessageBox>("Error", new DialogParameters { { "Icon", "error" }, { "Message", ex.Message } });
        }
    }

}